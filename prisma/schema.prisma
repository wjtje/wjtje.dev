generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  pages Page[]
}

enum Language {
  EN
  NL
}

enum PageType {
  BLOG
  REPO
}

model Page {
  id Int @id @default(autoincrement())

  // Metadata
  language  Language @default(EN)
  visible   Boolean  @default(false)
  pageType  PageType @default(BLOG)
  createdAt DateTime @default(now())

  // Page owner
  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  // Url and (social)preview
  slug    String
  preview String
  image   String?

  // Page content
  title String
  body  String

  @@unique([slug, language])
}

// Remote data cache

model RemoteSource {
  id         Int          @id @default(autoincrement())
  name       String
  lastUpdate DateTime?
  RemoteData RemoteData[]
}

model RemoteData {
  id             Int          @id @default(autoincrement())
  remoteSource   RemoteSource @relation(fields: [remoteSourceId], references: [id])
  remoteSourceId Int
  mainTitle      String
  subTitle       String?
  date           DateTime?
  image          String?
}

model StreetCompleteQuest {
  id      Int     @id @default(autoincrement())
  name    String?
  iconUrl String?
}

model MapCompleteTheme {
  id      Int     @id @default(autoincrement())
  theme   String
  name    String?
  iconUrl String?
}

model GithubRepo {
  id              Int      @id @default(autoincrement())
  owner           String
  name            String
  description     String?
  url             String
  fork            Boolean
  parentName      String?
  parentUrl       String?
  language        String?
  forksCount      Int
  stargazersCount Int
  topics          String?
  image           String?
  pinned          Boolean
  createdAt       DateTime
  updatedAt       DateTime
  detailPage      Boolean  @default(false)
}
